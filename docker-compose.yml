version: '3.8'

services:
  # 메시지 큐
  rabbitmq:
    image: rabbitmq:3-management
    env_file:
      - .env
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT}:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - actverse_network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # 데이터베이스
  postgres:
    image: postgres:13
    env_file:
      - .env
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - actverse_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # API 게이트웨이
  api_gateway:
    build:
      dockerfile: ./api_gateway/Dockerfile
    volumes:
      - ./common:/app/common
    ports:
      - "8000:8000"
    depends_on:
      - rabbitmq
      - postgres
    env_file:
      - .env
    networks:
      - actverse_network
    restart: always


  # 라벨링 모니터링 워커
  labeling_monitor:
    build:
      dockerfile: ./labeling_monitor/Dockerfile
    depends_on:
      - rabbitmq
    env_file:
      - .env
    volumes:
      - data_storage:${DATA_STORAGE_PATH}
      - ./common:/app/common
    networks:
      - actverse_network
    restart: always

  # 모델 트레이너 워커
  model_trainer:
    build:
      dockerfile: ./model_trainer/Dockerfile
    depends_on:
      - rabbitmq
    env_file:
      - .env
    volumes:
      - data_storage:${DATA_STORAGE_PATH}
      - ./common:/app/common
    networks:
      - actverse_network
    restart: always

  # 모델 결과 변환 및 내보내기 워커
  model_exporter:
    build:
      dockerfile: ./model_exporter/Dockerfile
    depends_on:
      - rabbitmq
    env_file:
      - .env
    volumes:
      - data_storage:${DATA_STORAGE_PATH}
      - ./common:/app/common
    networks:
      - actverse_network
    restart: always


  # TODO: nvidia triton inference server
  triton_server:
    image: nvcr.io/nvidia/tritonserver:24.03-py3
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
    volumes:
      - data_storage:/data_storage/models
    command:
      - tritonserver
      - "--model-repository=/data_storage/models"
      - "--log-verbose=1"
      - "--load-model=*"
      - "--model-control-mode=explicit"
    networks:
      - actverse_network
    restart: always

networks:
  actverse_network:
    driver: bridge

volumes:
  rabbitmq_data:
  postgres_data:
  data_storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: C:/Users/user/Desktop/code/actnova-api-v2/data_storage

